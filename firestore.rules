/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and student data.
 *   It also allows public read access to habit entries while restricting modifications to authenticated users.
 *
 * @dataStructure
 *   /users/{userId}: Stores public user profile information.  Each user can only read/write their own profile.
 *   /students/{studentId}: Stores detailed student data. Students are linked to user accounts via the 'linkedUserUid' field. Only the linked user can manage student data.
 *   /habit_entries/{entryId}: Stores individual habit scores. Publicly readable, but only authenticated users can create, update, or delete entries.
 *   /app_settings/{settingId}: Stores global app settings.  Write access is denied for all users.
 *   /classes/{classId}: Stores class data.  Write access is denied for all users.
 *
 * @keySecurityDecisions
 *   - Users can only manage their own profile data.
 *   - Students can only be managed by the user account they are linked to.
 *   - Habit entries are publicly readable but only writable by authenticated users.
 *   - App settings and class data are read-only (no user can modify them).
 *   - Listing of user profiles and student data is restricted to prevent unauthorized information harvesting.
 *
 * @denormalizationForAuthorization
 *   - The `Student` entity contains a `linkedUserUid` field, which is used to link the student data to a specific user account. This denormalization avoids the need for complex queries to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.  Users can read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can read their own profile.
     * @allow (update) - User with UID 'user123' can update their own profile.
     * @allow (delete) - User with UID 'user123' can delete their own profile.
     * @deny (create) - User with UID 'user456' cannot create a profile for 'user123'.
     * @deny (update) - User with UID 'user456' cannot update the profile for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to student data. Only the linked user can manage student data.
     * @path /students/{studentId}
     * @allow (create) - User with UID 'user123' can create student data if request.auth.uid == 'user123' and the 'linkedUserUid' field is also 'user123'.
     * @allow (get) - User with UID 'user123' can read student data if the 'linkedUserUid' field is 'user123'.
     * @allow (update) - User with UID 'user123' can update student data if the 'linkedUserUid' field is 'user123'.
     * @allow (delete) - User with UID 'user123' can delete student data if the 'linkedUserUid' field is 'user123'.
     * @deny (create) - User with UID 'user456' cannot create student data for a student linked to 'user123'.
     * @deny (update) - User with UID 'user456' cannot update student data linked to 'user123'.
     * @principle Enforces ownership based on the 'linkedUserUid' field.
     */
    match /students/{studentId} {
      allow get: if isSignedIn() && resource.data.linkedUserUid == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.linkedUserUid;
      allow update: if isSignedIn() && isExistingLinkedUser(resource.data.linkedUserUid);
      allow delete: if isSignedIn() && isExistingLinkedUser(resource.data.linkedUserUid);
    }

    /**
     * @description Controls access to habit entry data. Habit entries are publicly readable, but creation, modification and deletion is restricted to authenticated users.
     * @path /habit_entries/{entryId}
     * @allow (get) - Any user (or no user) can read habit entry data.
     * @allow (list) - Any user (or no user) can list habit entry data.
     * @allow (create) - Any authenticated user can create a habit entry.
     * @allow (update) - Any authenticated user can update a habit entry.
     * @allow (delete) - Any authenticated user can delete a habit entry.
     * @principle Publicly readable, writable by authenticated users.
     */
    match /habit_entries/{entryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

     /**
      * @description Controls access to app settings. No user can modify app settings.
      * @path /app_settings/{settingId}
      * @allow (get) - Any user can read app settings.
      * @deny (create) - No user can create app settings.
      * @deny (update) - No user can update app settings.
      * @deny (delete) - No user can delete app settings.
      * @principle Read-only data, no write access.
      */
    match /app_settings/{settingId} {
        allow get: if true;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Controls access to class data. No user can modify class data.
     * @path /classes/{classId}
     * @allow (get) - Any user can read class data.
     * @deny (create) - No user can create class data.
     * @deny (update) - No user can update class data.
     * @deny (delete) - No user can delete class data.
     * @principle Read-only data, no write access.
     */
    match /classes/{classId} {
        allow get: if true;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isLinkedUser(linkedUserUid) {
        return request.auth.uid == linkedUserUid;
    }

    function isExistingLinkedUser(linkedUserUid) {
        return isLinkedUser(linkedUserUid) && resource != null;
    }
  }
}