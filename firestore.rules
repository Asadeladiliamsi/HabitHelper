/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict access control based on user roles and ownership.
 * It allows for rapid prototyping by omitting detailed data validation.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Access is restricted to the owner.
 * - /students/{studentId}: Stores student data.
 * - /habit_entries/{entryId}: Stores individual habit scores.
 * - /app_settings/{settingId}: Stores global application settings.
 * - /classes/{classId}: Stores class data.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles.
 * - Listing of users is disallowed.
 * - `AppSettings` are only writeable by an `admin` user.
 *
 * Denormalization for Authorization:
 *  - No denormalization is explicitly performed in this ruleset.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles. Users can only read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     *   request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' reads their profile.
     *   request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' updates their profile.
     *   request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' tries to create a profile for 'user123'.
     *   request.auth.uid != 'user123'
     * @deny (get) User with ID 'user456' tries to read profile 'user123'.
     *   request.auth.uid != 'user123'
     * @deny (update) User with ID 'user456' tries to update profile 'user123'.
     *   request.auth.uid != 'user123'
     * @deny (delete) Non-owner tries to delete the profile.
     *   request.auth.uid != 'user123'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages student data.
     * @path /students/{studentId}
     * @allow (create) Authenticated user creates a student profile.
     *   request.auth != null
     * @allow (get) Any authenticated user can read a student profile.
     *   request.auth != null
     * @allow (update) Authenticated user updates a student profile.
     *   request.auth != null
     * @deny (create) Unauthenticated user tries to create a student profile.
     *   request.auth == null
     * @deny (get) Unauthenticated user tries to read a student profile.
     *   request.auth == null
     * @deny (update) Unauthenticated user tries to update a student profile.
     *   request.auth == null
     * @deny (delete) Unauthenticated user tries to delete a student profile.
     *   request.auth == null
     * @principle Requires authentication for all access to student data.
     */
    match /students/{studentId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages habit entries. Requires authentication for all operations.
     * @path /habit_entries/{entryId}
     * @allow (create) Authenticated user creates a habit entry.
     *   request.auth != null
     * @allow (get) Any authenticated user can read a habit entry.
     *   request.auth != null
     * @allow (update) Authenticated user updates a habit entry.
     *   request.auth != null
     * @deny (create) Unauthenticated user tries to create a habit entry.
     *   request.auth == null
     * @deny (get) Unauthenticated user tries to read a habit entry.
     *   request.auth == null
     * @deny (update) Unauthenticated user tries to update a habit entry.
     *   request.auth == null
     * @deny (delete) Unauthenticated user tries to delete a habit entry.
     *   request.auth == null
     * @principle Requires authentication for all access to habit entry data.
     */
    match /habit_entries/{entryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages global application settings. Only admins can write.
     * @path /app_settings/{settingId}
     * @allow (get) Any user can read the application settings.
     *   request.auth != null
     * @allow (update) Only users with the 'admin' role can update app settings.
     *   request.auth.token.role == 'admin'
     * @deny (create) Non-admin user tries to create application settings.
     *   request.auth.token.role != 'admin'
     * @deny (update) Non-admin user tries to update application settings.
     *   request.auth.token.role != 'admin'
     * @deny (delete) Non-admin user tries to delete application settings.
     *   request.auth.token.role != 'admin'
     * @principle Restricts write access to admins.
     */
    match /app_settings/{settingId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages class data.  Requires authentication for all operations.
     * @path /classes/{classId}
     * @allow (create) Authenticated user creates class data.
     *   request.auth != null
     * @allow (get) Any authenticated user can read class data.
     *   request.auth != null
     * @allow (update) Authenticated user updates class data.
     *   request.auth != null
     * @deny (create) Unauthenticated user tries to create class data.
     *   request.auth == null
     * @deny (get) Unauthenticated user tries to read class data.
     *   request.auth == null
     * @deny (update) Unauthenticated user tries to update class data.
     *   request.auth == null
     * @deny (delete) Unauthenticated user tries to delete class data.
     *   request.auth == null
     * @principle Requires authentication for all access to class data.
     */
    match /classes/{classId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }

  function isAdmin() {
    return request.auth.token.role == 'admin';
  }
}