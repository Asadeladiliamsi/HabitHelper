/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and allows open reads for public data.
 * Students are secured such that only linked users can create and manage data and teachers can list
 * all students in order to manage the application.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information.
 * - /students/{studentId}: Stores detailed student data.
 * - /habit_entries/{entryId}: Stores habit entry data.
 * - /app_settings/{settingId}: Stores global application settings.
 * - /classes/{classId}: Stores class data.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - Public read access is granted to /app_settings.
 * - Access to student data is restricted to the linked user and teachers.
 *
 * Denormalization for Authorization:
 *   - No explicit denormalization is used in this configuration. The security rules rely on the `linkedUserUid`
 *     field in the `/students/{studentId}` documents and the user's `role` to authorize access.
 *
 * Structural Segregation:
 *   - Public user profiles are stored in `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) If the user's UID matches the userId.
     * @allow (get, list) If the user's UID matches the userId.
     * @allow (update, delete) If the user's UID matches the userId and the document exists.
     * @deny (create) If the user's UID does not match the userId.
     * @deny (get, list) If the user's UID does not match the userId.
     * @deny (update, delete) If the user's UID does not match the userId or the document does not exist.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to student data.
     * @path /students/{studentId}
     * @allow (create) If the user is a teacher or the student's linkedUserUid matches the request's auth UID.
     * @allow (get) If the user is a teacher or the student's linkedUserUid matches the request's auth UID.
     * @allow (list) If the user is a teacher.
     * @allow (update, delete) If the student's linkedUserUid matches the request's auth UID and the document exists.
     * @deny (create) If the user is not a teacher and the student's linkedUserUid does not match the request's auth UID.
     * @deny (get) If the user is not a teacher and the student's linkedUserUid does not match the request's auth UID.
     * @deny (list) If the user is not a teacher.
     * @deny (update, delete) If the student's linkedUserUid does not match the request's auth UID or the document does not exist.
     * @principle Restricts access to student data to the linked user and teachers.
     */
    match /students/{studentId} {
      allow get: if isSignedIn() && (isTeacher() || isLinkedUser(resource.data.linkedUserUid));
      allow list: if isSignedIn() && isTeacher();
      allow create: if isSignedIn() && (isTeacher() || request.auth.uid == request.resource.data.linkedUserUid);
      allow update: if isSignedIn() && isExistingLinkedUser(resource.data.linkedUserUid);
      allow delete: if isSignedIn() && isExistingLinkedUser(resource.data.linkedUserUid);
    }

        /**
         * @description Controls access to habit entries.
         * @path /habit_entries/{entryId}
         * @allow (create) If the user is a teacher or the student's linkedUserUid matches the request's auth UID.
         * @allow (get) If the user is a teacher or the student's linkedUserUid matches the request's auth UID.
         * @allow (list) If the user is a teacher.
         * @allow (update, delete) If the student's linkedUserUid matches the request's auth UID and the document exists.
         * @deny (create) If the user is not a teacher and the student's linkedUserUid does not match the request's auth UID.
         * @deny (get) If the user is not a teacher and the student's linkedUserUid does not match the request's auth UID.
         * @deny (list) If the user is not a teacher.
         * @deny (update, delete) If the student's linkedUserUid does not match the request's auth UID or the document does not exist.
         * @principle Restricts access to habit entries to the linked user and teachers.
         */
        match /habit_entries/{entryId} {
            allow get: if isSignedIn() && (isTeacher() || isStudentOfEntry(resource.data.studentId));
            allow list: if isSignedIn() && isTeacher();
            allow create: if isSignedIn() && (isTeacher() || isStudentOfEntry(request.resource.data.studentId));
            allow update: if isSignedIn() && (isTeacher() || isExistingStudentOfEntry(resource.data.studentId));
            allow delete: if isSignedIn() && (isTeacher() || isExistingStudentOfEntry(resource.data.studentId));
        }

    /**
     * @description Controls access to global app settings.
     * @path /app_settings/{settingId}
     * @allow (get, list) Public read access for app settings.
     * @allow (create, update, delete) Only admins can modify app settings.
     * @deny (create, update, delete) If the user is not an admin.
     * @principle Provides public read access but restricts write access to admins.
     */
    match /app_settings/{settingId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to class data.
     * @path /classes/{classId}
     * @allow (get, list) Public read access for class data.
     * @allow (create, update, delete) Only admins can modify class data.
     * @deny (create, update, delete) If the user is not an admin.
     * @principle Provides public read access but restricts write access to admins.
     */
    match /classes/{classId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isTeacher() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'guru';
    }

    function isLinkedUser(linkedUserUid) {
      return request.auth.uid == linkedUserUid;
    }

    function isExistingLinkedUser(linkedUserUid) {
      return isSignedIn() && isLinkedUser(linkedUserUid) && resource != null;
    }

    function isStudentOfEntry(studentId) {
      let student = get(/databases/$(database)/documents/students/$(studentId)).data;
      return request.auth.uid == student.linkedUserUid;
    }

    function isExistingStudentOfEntry(studentId) {
      return isSignedIn() && isStudentOfEntry(studentId) && resource != null;
    }
  }
}