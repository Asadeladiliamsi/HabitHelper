/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model, primarily focusing on owner-only access and role-based restrictions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /students/{studentId}: Stores student data, with write access limited.
 * - /habit_entries/{entryId}: Stores habit entry data. Write access is limited to authenticated users.
 * - /app_settings/{settingId}: Stores global app settings, write access is denied to all.
 * - /classes/{classId}: Stores class data and settings, with write access denied to all.
 *
 * Key Security Decisions:
 * - User data is private and only accessible to the authenticated user.
 * - Listing of users is disallowed for privacy.
 * - App settings are read-only for all users.
 * - Class data write access is denied.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User can only access their own profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (list) Listing users is not allowed.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId) && request.auth.uid == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to student data documents.
     * @path /students/{studentId}
     * @allow (get, list) Allow get and list operation.
     * @deny (create, update, delete) No one can create, update, or delete student data.
     * @principle Data modification for student data is forbidden.
     */
    match /students/{studentId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to habit entry documents.
     * @path /habit_entries/{entryId}
     * @allow (get, list) Allow all users to read habit entries.
     * @allow (create) Only authenticated users can create habit entries.
     * @deny (update, delete) No one can update or delete habit entries.
     * @principle Restricts habit entry modifications.
     */
    match /habit_entries/{entryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to app settings documents.
     * @path /app_settings/{settingId}
     * @allow (get, list) Allow all users to read app settings.
     * @deny (create, update, delete) No one can create, update, or delete app settings.
     * @principle App settings are read-only.
     */
    match /app_settings/{settingId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to class data documents.
     * @path /classes/{classId}
     * @allow (get, list) Allow all users to read class data.
     * @deny (create, update, delete) No one can create, update, or delete class data.
     * @principle Class data modification is forbidden.
     */
    match /classes/{classId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}