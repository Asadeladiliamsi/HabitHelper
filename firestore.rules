/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model, with specific rules for user profiles, student data, habit entries, application settings, and class data.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the owning user and admins.
 * - /students/{studentId}: Student data, accessible to admins and teachers.
 * - /habit_entries/{entryId}: Habit entries, write access controlled by teacher role.
 * - /app_settings/{settingId}: Application settings, accessible only to admins.
 * - /classes/{classId}: Class data, read access is public, write access restricted to admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Strict ownership is enforced for user profiles.
 * - Admin role grants broad access to application settings and student data.
 * - Class data read access is public to simplify the dashboard for teachers.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the user is signed in and the UID matches, false otherwise.
     * @example isOwner('someUserId')
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     * @return {boolean} True if the user has the 'admin' role, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'admin';
    }

    /**
     * @description Checks if the user has the 'guru' role.
     * @return {boolean} True if the user has the 'guru' role, false otherwise.
     */
    function isGuru() {
      return isSignedIn() && request.auth.token.role == 'guru';
    }

    /**
     * @description Checks if the document exists and the authenticated user is the owner.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the document exists and the user is the owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching UID can create their profile.
     * @allow (get, update, delete) - Authenticated user with matching UID can access and modify their profile.
     * @deny (list) - User listing is not allowed.
     * @deny (create) - Authenticated user cannot create a profile with a mismatched UID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for student data.
     * @path /students/{studentId}
     * @allow (get, list) - Admins and teachers can read student data.
     * @allow (create) - Admins can create student data.
     * @allow (update, delete) - Admins can update and delete student data.
     * @deny (create, update, delete) - Non-admins and non-teachers cannot modify student data.
     * @principle Restricts student data modification to authorized personnel.
     */
    match /students/{studentId} {
      allow get, list: if isAdmin() || isGuru();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Security rules for habit entries.
     * @path /habit_entries/{entryId}
     * @allow (get, list) - Admins and teachers can read habit entries.
     * @allow (create) - Teachers can create habit entries.
     * @allow (update, delete) - Admins can update and delete habit entries.
     * @deny (create, update, delete) - Non-admins and non-teachers cannot modify habit entries.
     * @principle Limits habit entry modification to authorized personnel.
     */
    match /habit_entries/{entryId} {
        allow get, list: if isAdmin() || isGuru();
        allow create: if isGuru();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Security rules for application settings.
     * @path /app_settings/{settingId}
     * @allow (get, list) - Admins can read application settings.
     * @allow (create, update, delete) - Admins can create, update, and delete application settings.
     * @deny (create, update, delete) - Non-admins cannot modify application settings.
     * @principle Restricts app settings modification to admins only.
     */
    match /app_settings/{settingId} {
        allow get, list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
    
    /**
     * @description Security rules for class data.
     * @path /classes/{classId}
     * @allow (get, list) - Anyone can read class data.
     * @allow (create, update, delete) - Only admins can create, update, and delete class data.
     * @principle Restricts class data modification to admins.
     */
    match /classes/{classId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}