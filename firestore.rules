rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles.  Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own profile at /users/user123.
     * @deny (create) - User with UID 'user123' cannot create a profile at /users/anotherUser.
     * @deny (update, delete) - User with UID 'user123' cannot update or delete another user's profile at /users/anotherUser.
     * @deny (list) - No one can list all user profiles.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects student data. Only authenticated users can create, update, and delete student records.
     * @path /students/{studentId}
     * @allow (create) - Authenticated user can create a new student record.
     * @allow (get) - Authenticated user can read a student record.
     * @allow (update) - Authenticated user can update an existing student record.
     * @allow (delete) - Authenticated user can delete an existing student record.
     * @deny (create) - Unauthenticated user cannot create a student record.
     * @deny (update) - Unauthenticated user cannot update a student record.
     * @deny (delete) - Unauthenticated user cannot delete a student record.
     * @principle Requires authentication for all write operations on student data.
     */
    match /students/{studentId} {
       function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false; // Limiting list access for now
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Protects habit entry data. Only authenticated users can create, update, and delete habit entries.
     * @path /habit_entries/{entryId}
     * @allow (create) - Authenticated user can create a new habit entry.
     * @allow (get) - Authenticated user can read a habit entry.
     * @allow (update) - Authenticated user can update an existing habit entry.
     * @allow (delete) - Authenticated user can delete an existing habit entry.
     * @deny (create) - Unauthenticated user cannot create a habit entry.
     * @deny (update) - Unauthenticated user cannot update a habit entry.
     * @deny (delete) - Unauthenticated user cannot delete a habit entry.
     * @principle Requires authentication for all write operations on habit entry data.
     */
    match /habit_entries/{entryId} {
       function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false; // Limiting list access for now
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to app settings, but restricts writes.
     * @path /app_settings/{settingId}
     * @allow (get, list) - Anyone can read the app settings.
     * @deny (create, update, delete) - No one can modify app settings (writes are disabled in this prototype).
     * @principle Allows public reads, restricts all writes.
     */
    match /app_settings/{settingId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects class data. Only authenticated users can create, update, and delete class data.
     * @path /classes/{classId}
     * @allow (create) - Authenticated user can create a new class data entry.
     * @allow (get) - Authenticated user can read a class data entry.
     * @allow (update) - Authenticated user can update an existing class data entry.
     * @allow (delete) - Authenticated user can delete an existing class data entry.
     * @deny (create) - Unauthenticated user cannot create a class data entry.
     * @deny (update) - Unauthenticated user cannot update a class data entry.
     * @deny (delete) - Unauthenticated user cannot delete a class data entry.
     * @principle Requires authentication for all write operations on class data.
     */
    match /classes/{classId} {
       function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false; // Limiting list access for now
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}