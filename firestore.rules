
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions for reusable logic
    function isUserSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    function isAdmin() {
      return isUserSignedIn() && getUserRole(request.auth.uid) == 'admin';
    }
    
    function isGuru() {
      return isUserSignedIn() && getUserRole(request.auth.uid) == 'guru';
    }
    
    function isStudent(studentId) {
      let studentEmail = get(/databases/$(database)/documents/students/$(studentId)).data.email;
      return isUserSignedIn() && request.auth.token.email == studentEmail;
    }
    
    function isParentOfStudent(studentId) {
      let parentId = get(/databases/$(database)/documents/students/$(studentId)).data.parentId;
      return isUserSignedIn() && request.auth.uid == parentId;
    }

    // Collection: users
    // Stores user profiles and roles.
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin() || isGuru();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Collection: students
    // Stores student data, including their habits array.
    match /students/{studentId} {
      allow read: if isUserSignedIn() && (isAdmin() || isGuru() || isStudent(studentId) || isParentOfStudent(studentId));
      allow create, delete: if isAdmin() || isGuru();
      // Allow updates from admins, gurus, or for linking a parent.
      // The update of the habits array itself is triggered by writing to habit_entries.
      allow update: if isAdmin() || isGuru();
    }

    // Collection: habit_entries
    // Stores daily habit scores, which then trigger updates to the student's main document.
    match /habit_entries/{entryId} {
      allow read: if isUserSignedIn(); // Allow all signed-in users to read for now, can be tightened if needed.

      // Create permissions are the most critical here.
      allow create: if (isAdmin() || isGuru()) ||
                       // Students can only create entries for themselves.
                       (isStudent(request.resource.data.studentId)) ||
                       // Parents can only create entries for their children and for specific habits.
                       (isParentOfStudent(request.resource.data.studentId) && 
                         request.resource.data.habitName in ['Taat Beribadah', 'Rajin Olahraga', 'Makan Sehat & Bergizi', 'Tidur Cepat']);
                         
      allow update, delete: if isAdmin() || isGuru();
    }
  }
}
