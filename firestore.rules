/**
 * @file Firestore Security Rules
 * @description This ruleset is in PROTOTYPING mode. It prioritizes strict authorization and assumes flexible data shapes for rapid development.
 *
 * Core Philosophy:
 *  - Enforce authentication for all write operations.
 *  - Apply ownership-based access control where applicable (e.g., user profiles).
 *  - Default to denying access unless explicitly allowed.
 *
 * Data Structure:
 *  - /users/{userId}: Stores public user profile data.
 *  - /students/{studentId}: Stores detailed student data.
 *  - /habit_entries/{entryId}: Stores individual habit scores.
 *  - /app_settings/{settingId}: Stores global application settings.
 *  - /classes/{classId}: Stores data for classes.
 *
 * Key Security Decisions:
 *  - User listing is disallowed unless specifically needed.
 *  - Public read access is granted for some collections in prototyping, but write access is always restricted.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile information. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their profile document in /users/user123.
     * @allow (get) User with UID 'user123' reads their own profile document in /users/user123.
     * @allow (update) User with UID 'user123' updates their own profile document in /users/user123.
     * @allow (delete) User with UID 'user123' deletes their own profile document in /users/user123.
     * @deny (create) User with UID 'user123' tries to create a profile document for user 'user456' in /users/user456.
     * @deny (get) User with UID 'user123' tries to read the profile document of user 'user456' in /users/user456.
     * @deny (update) User with UID 'user123' tries to update the profile document of user 'user456' in /users/user456.
     * @deny (delete) User with UID 'user123' tries to delete the profile document of user 'user456' in /users/user456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages student data.
     * @path /students/{studentId}
     * @allow (create) Authenticated user creates a new student document.
     * @allow (get) Any user can read student data.
     * @allow (update) Authenticated user updates an existing student document.
     * @allow (delete) Authenticated user deletes an existing student document.
     * @deny (create) Unauthenticated user attempts to create a new student document.
     * @principle Requires authentication for all write operations; allows public read access.
     */
    match /students/{studentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages habit entries.
     * @path /habit_entries/{entryId}
     * @allow (create) Authenticated user creates a new habit entry.
     * @allow (get) Any user can read habit entries.
     * @allow (update) Authenticated user updates an existing habit entry.
     * @allow (delete) Authenticated user deletes an existing habit entry.
     * @deny (create) Unauthenticated user attempts to create a new habit entry.
     * @principle Requires authentication for all write operations; allows public read access.
     */
    match /habit_entries/{entryId} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages application settings.
     * @path /app_settings/{settingId}
     * @allow (create) Authenticated user creates a new app setting.
     * @allow (get) Any user can read app settings.
     * @allow (update) Authenticated user updates an existing app setting.
     * @allow (delete) Authenticated user deletes an existing app setting.
     * @deny (create) Unauthenticated user attempts to create a new app setting.
     * @principle Requires authentication for all write operations; allows public read access.
     */
    match /app_settings/{settingId} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }
    
    /**
     * @description Manages class data.
     * @path /classes/{classId}
     * @allow (create) Authenticated user creates a new class.
     * @allow (get) Any user can read class data.
     * @allow (update) Authenticated user updates an existing class.
     * @allow (delete) Authenticated user deletes an existing class.
     * @deny (create) Unauthenticated user attempts to create a new class.
     * @principle Requires authentication for all write operations; allows public read access.
     */
    match /classes/{classId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}