/**
 * @file Firestore Security Rules
 * @description This ruleset implements a role-based access control system with user-owned data and public read access where appropriate.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /students/{studentId}: Stores student data, publicly readable and writable by anyone for prototyping.
 * - /habit_entries/{entryId}: Stores individual habit scores, writable by anyone for prototyping.
 * - /app_settings/{settingId}: Stores global application settings, protected with owner-only access.
 * - /classes/{classId}: Stores data for classes, publicly readable and writable by anyone for prototyping.
 *
 * Key Security Decisions:
 * - User profiles are strictly private (owner-only access).
 * - Students and Classes are intentionally public read and write for prototyping purposes, but must eventually have authorization!
 * - The app_settings collection is protected with owner-only writes.
 *
 * Denormalization for Authorization:
 *   For simplicity and performance, authorization checks rely on the authenticated user's UID (`request.auth.uid`) and,
 *   where applicable, the document's `userId` field to ensure data ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == request.resource.data.uid
     * @deny (get, update, delete) if request.auth.uid != userId
     * @deny (create) if request.auth.uid != request.resource.data.uid
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read and write student data. FOR PROTOTYPING PURPOSES ONLY.
     * @path /students/{studentId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if true
     * @principle Public read and write access for prototyping.
     */
    match /students/{studentId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows anyone to read and write habit entries for prototyping.
     * @path /habit_entries/{entryId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if true
     * @principle Public read and write access for prototyping.
     */
    match /habit_entries/{entryId} {
        allow get, list: if true;
        allow create, update, delete: if true;
    }

    /**
     * @description Stores global application settings, like registration codes.
     * @path /app_settings/{settingId}
     * @allow (get, list) if true
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Only admin can read.
     */
    match /app_settings/{settingId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

        /**
     * @description Allows anyone to read and write class data. FOR PROTOTYPING PURPOSES ONLY.
     * @path /classes/{classId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if true
     * @principle Public read and write access for prototyping.
     */
    match /classes/{classId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}