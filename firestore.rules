/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and student data,
 * with public read access to app settings. It ensures that users can only read and write their own profiles,
 * and only authenticated users can create new student entries. Habit entries are publicly readable but
 * can only be created, updated, or deleted by authorized users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with access restricted to the owner.
 * - /students/{studentId}: Stores student data, with access restricted to authenticated users for creation.
 * - /habit_entries/{entryId}: Stores habit entries, publicly readable, write access not defined.
 * - /app_settings/{settingId}: Stores global app settings, publicly readable but write-protected.
 * - /classes/{classId}: Stores data about classes.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles.
 * - Student creation is limited to authenticated users.
 * - Habit entries are publicly readable.
 * - App settings are publicly readable but write-protected.
 * - Classes have no write rules.
 *
 * Denormalization for Authorization:
 *   The rules rely on the `uid` field in the `/users/{userId}` document matching the `userId` in the path.
 *   The rules rely on the `studentId` field in the `/habit_entries/{entryId}` document for access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) User with UID 'user123' can read/write /users/user123.
     * @allow (create) User with UID 'user123' can create /users/user123.
     * @deny (get, update, delete) User with UID 'user456' cannot read/write /users/user123.
     * @deny (create) User with UID 'user456' cannot create /users/user123.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows any authenticated user to create student entries.
     * @path /students/{studentId}
     * @allow (create) Authenticated user can create a new student profile.
     * @deny (create) Unauthenticated user cannot create a new student profile.
     * @principle Requires authentication for student creation.
     */
    match /students/{studentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read habit entries, but restricts write access.
     * @path /habit_entries/{entryId}
     * @allow (get, list) Any user can read habit entries.
     * @deny (create, update, delete) No one can create, update, or delete habit entries without specific authorization.
     * @principle Public read access with restricted write access.
     */
    match /habit_entries/{entryId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add appropriate write rules
    }

    /**
     * @description Allows anyone to read app settings, but restricts write access.
     * @path /app_settings/{settingId}
     * @allow (get, list) Any user can read app settings.
     * @deny (create, update, delete) No one can create, update, or delete app settings without specific authorization.
     * @principle Public read access with restricted write access.
     */
    match /app_settings/{settingId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows read access for anyone to read class data.
     * @path /classes/{classId}
     * @allow (get, list) Any user can read class data.
     * @deny (create, update, delete) No one can create, update, or delete class data without specific authorization.
     * @principle Public read access with restricted write access.
     */
        match /classes/{classId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }
  }
}