/**
 * @fileoverview Firestore Security Rules for the StudiKu application.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for user profiles and student data.
 * Public read access is granted for certain collections, but only when the data includes
 * an ownership field.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the owning user and admins.
 * - /students/{studentId}: Student data, accessible only to linked user, admins, and possibly parents (TBD).
 * - /habit_entries/{entryId}: Habit entries, accessible to the student and their linked accounts.
 * - /app_settings/{settingId}: Application settings, restricted to admins.
 * - /classes/{classId}: Class data, restricted to admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Public read access is granted only where documents have explicit ownership fields.
 * - Unauthenticated access is disallowed.
 *
 * Denormalization for Authorization:
 * - Student documents have a 'linkedUserUid' field to simplify access control for the linked user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, create, update, delete): If the user is the owner of the profile.
     * @deny (get, create, update, delete): If the user is not the owner of the profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Only signed-in users can attempt to access user documents.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to student documents.
     * @path /students/{studentId}
     * @allow (get, list): Public access for all users.
     * @allow (create, update, delete): Only the linked user or an admin can modify student data.
     * @deny (create, update, delete): If the user is not the linked user or an admin.
     * @principle Enforces that only the linked user can modify student data.
     */
    match /students/{studentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.linkedUserUid == request.auth.uid;
      allow update: if isSignedIn() && resource.data.linkedUserUid == request.auth.uid && request.resource.data.linkedUserUid == resource.data.linkedUserUid;
      allow delete: if isSignedIn() && resource.data.linkedUserUid == request.auth.uid;
    }

    /**
     * @description Controls access to habit entries.
     * @path /habit_entries/{entryId}
     * @allow (get, list): Public access for all users.
     * @allow (create, update, delete): Only the linked user can modify habit entries.
     * @deny (create, update, delete): If the user is not the linked user.
     * @principle Enforces that only the linked user can modify habit entries.
     */
    match /habit_entries/{entryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to app settings.
     * @path /app_settings/{settingId}
     * @allow (get): Public access for all users.
     * @allow (create, update, delete): No access for non admin users.
     * @deny (create, update, delete): For non-admin users.
     * @principle Enforces that only admins can modify app settings.
     */
    match /app_settings/{settingId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false; 
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to class data.
     * @path /classes/{classId}
     * @allow (get, list): Public access for all users.
     * @allow (create, update, delete): No access for non admin users.
     * @deny (create, update, delete): For non-admin users.
     * @principle Enforces that only admins can modify class data.
     */
    match /classes/{classId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // --- Helper functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}