/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict access control based on user roles and ownership.
 * It allows for rapid prototyping by relaxing data validation constraints, focusing instead on who can access what.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles.
 * - /students/{studentId}: Stores detailed student data.
 * - /habit_entries/{entryId}: Stores habit score entries.
 * - /app_settings/{settingId}: Stores global application settings.
 * - /classes/{classId}: Stores data and settings for each class.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent information leakage.
 * - Public read access is granted only to explicitly public collections, with owner-only writes.
 * - Data validation is minimized in favor of authorization checks for rapid iteration.
 *
 * Error Context:
 * - The original error was a `FirestorePermissionError` caused by attempting to `list` the `users` collection.
 * - This operation is denied because listing all users is generally a security risk.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces ownership for user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - User with UID 'user123' can access /users/user123.
     * @deny (get, create, update, delete) - User with UID 'user456' cannot access /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces ownership for student data. Only an authenticated user that is linked to the student data can read or write student data.
     * @path /students/{studentId}
     * @allow (get, create, update, delete) - User with UID 'user123' can access /students/student123 if `linkedUserUid` is 'user123'.
     * @deny (get, create, update, delete) - User with UID 'user456' cannot access /students/student123.
     * @principle Enforces document ownership for all operations.
     */
    match /students/{studentId} {
      function isLinkedUser(linkedUserUid) {
        return request.auth.uid == linkedUserUid;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isLinkedUser(resource.data.linkedUserUid);
      allow list: if false;
      allow create: if isSignedIn() && isLinkedUser(request.resource.data.linkedUserUid);
      allow update: if isSignedIn() && isLinkedUser(resource.data.linkedUserUid);
      allow delete: if isSignedIn() && isLinkedUser(resource.data.linkedUserUid);
    }

    /**
     * @description Restricts habit entry access to authenticated users and requires data consistency.
     * @path /habit_entries/{entryId}
     * @allow (get, list) - Any authenticated user can read habit entries.
     * @allow (create) - Only authenticated users can create habit entries.
     * @allow (update, delete) - Only the user who recorded the habit entry can modify or delete it.
     * @deny (create) - Creation is denied if studentId is missing or doesn't match the authenticated user.
     * @deny (update, delete) - Update/delete is denied if the document does not exist.
     * @principle Enforces data integrity and restricts write access to the data's originator.
     */
    match /habit_entries/{entryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Restricts access to application settings to authenticated users.
     * @path /app_settings/{settingId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if false; // Only server-side modification is allowed
     * @principle Protects application settings from unauthorized modification.
     */
    match /app_settings/{settingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to class data to authenticated users.
     * @path /classes/{classId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if false; // Only server-side modification is allowed
     * @principle Protects class data from unauthorized modification.
     */
    match /classes/{classId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}