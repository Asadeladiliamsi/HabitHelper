/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles, accessible only to the user themselves.
 * - /students/{studentId}: Stores detailed student data, accessible to 'guru' and the student themselves.
 * - /habit_entries/{entryId}: Stores habit entry records. Only gurus are allowed to write.
 * - /app_settings/{settingId}: Stores application-wide settings. Only accessible to admins.
 * - /classes/{classId}: Stores data for classes. Only accessible to admins.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - 'guru' users can list students.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles based on ownership.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with matching {userId} can access their own profile.
     * @deny (get, create, update, delete) User attempts to access another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      // Allow users to read their own profile.
      allow get: if isSignedIn() && isOwner(userId);
      // Allow users to create their own profile, but enforce the user ID in the document.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      // Allow users to update their own profile. Enforce immutability of the userId.
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == request.resource.data.uid;
      // Allow users to delete their own profile.
      allow delete: if isSignedIn() && isOwner(userId);
      // Allow users to list all user profiles is denied.
      allow list: if false;
    }

    /**
     * @description Grants access to student data.
     * @path /students/{studentId}
     * @allow (get) 'guru' user can get any student data.
     * @allow (list) 'guru' user can list all students.
     * @allow (create, update, delete) No one can create, update or delete student data via client.
     * @principle Restricts student management to 'guru' users.
     */
    match /students/{studentId} {
      // Allow gurus to get student data.
      allow get: if isSignedIn() && isGuru();
      // Allow gurus to list all students.
      allow list: if isSignedIn() && isGuru();
      // No one can create, update, or delete students.
      allow create, update, delete: if false;
    }

        /**
         * @description Grants access to habit entries.
         * @path /habit_entries/{entryId}
         * @allow (get) Anyone can read a habit entry.
         * @allow (list) Anyone can list habit entries.
         * @allow (create, update, delete) Only gurus can create, update, and delete habit entries.
         * @principle Restricts habit entry management to 'guru' users.
         */
    match /habit_entries/{entryId} {
      // Allow anyone to read habit entries.
      allow get, list: if isSignedIn() && isGuru();
      // Only gurus can create, update, or delete habit entries.
      allow create, update, delete: if isSignedIn() && isGuru();
    }

        /**
         * @description Grants access to application settings.
         * @path /app_settings/{settingId}
         * @allow (get) Admins can read app settings.
         * @allow (update) Admins can update app settings.
         * @deny (get, update) Non-admins cannot access app settings.
         * @principle Restricts app settings management to admins.
         */
    match /app_settings/{settingId} {
      // Only admins can read and update app settings.
      allow get, update: if isSignedIn() && isAdmin();
      // Nobody else can create or delete app settings.
      allow create, delete, list: if false;
    }

    /**
     * @description Grants access to class data.
     * @path /classes/{classId}
     * @allow (get, list) Admins can read and list class data.
     * @allow (create, update, delete) Admins can create, update and delete class data.
     * @deny (get, create, update, delete) Non-admins cannot access class data.
     * @principle Restricts class data management to admins.
     */
    match /classes/{classId} {
      // Only admins can create, read, update, or delete class data.
      allow get, list, create, update, delete: if isSignedIn() && isAdmin();
    }

    // --- Helper Functions ---
    // Checks if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the user's ID matches the requested userId.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Checks if the user has the "guru" role.
    function isGuru() {
      return request.auth.token.role == 'guru';
    }

    // Checks if the user has the "admin" role.
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }
  }
}