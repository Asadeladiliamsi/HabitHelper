
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check user role from their profile in the 'users' collection
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    // Helper function to get a user's profile
    function getUserProfile(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    // Helper function to get a student's profile by their ID
    function getStudentProfile(studentId) {
      return get(/databases/$(database)/documents/students/$(studentId)).data;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow read access for the owner of the document, or for admins/teachers
      allow read: if request.auth != null &&
                   (request.auth.uid == userId || getUserRole(request.auth.uid) in ['admin', 'guru']);

      // Allow a user to create their own profile upon signup
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Allow profile updates only by the owner or an admin
      allow update: if request.auth != null &&
                     (request.auth.uid == userId || getUserRole(request.auth.uid) == 'admin');

      // Only admins can delete user profiles
      allow delete: if request.auth != null && getUserRole(request.auth.uid) == 'admin';
    }

    // Rules for the 'students' collection
    match /students/{studentId} {
      // Allow read access for admins, teachers, the linked parent, or the linked student
      allow read: if request.auth != null &&
                   (getUserRole(request.auth.uid) in ['admin', 'guru'] ||
                    (resource.data.parentId != null && resource.data.parentId == request.auth.uid) ||
                    (resource.data.linkedUserUid != null && resource.data.linkedUserUid == request.auth.uid));
      
      // Allow create, update, delete only for admins and teachers
      allow create, update, delete: if request.auth != null && getUserRole(request.auth.uid) in ['admin', 'guru'];
    }

    // Rules for the 'habit_entries' collection
    match /habit_entries/{entryId} {
      // Allow read access for admins, teachers, or the parent/student linked to the entry
      allow read: if request.auth != null &&
                   (getUserRole(request.auth.uid) in ['admin', 'guru'] ||
                    (getStudentProfile(resource.data.studentId).parentId == request.auth.uid) ||
                    (getStudentProfile(resource.data.studentId).linkedUserUid == request.auth.uid));

      // Allow create access if the user is an admin, teacher, or the linked student.
      // Parents have special conditions.
      allow create: if request.auth != null &&
                     (
                       // Admins and Teachers can write anything
                       getUserRole(request.auth.uid) in ['admin', 'guru'] ||
                       
                       // Students can only write for themselves
                       (getUserRole(request.auth.uid) == 'siswa' && getStudentProfile(request.resource.data.studentId).linkedUserUid == request.auth.uid) ||
                       
                       // Parents can only write for their own children and only for specific habits
                       (
                         getUserRole(request.auth.uid) == 'orangtua' &&
                         getStudentProfile(request.resource.data.studentId).parentId == request.auth.uid &&
                         request.resource.data.habitName in ['Taat Beribadah', 'Rajin Olahraga', 'Makan Sehat & Bergizi', 'Tidur Cepat']
                       )
                     );

      // No one should be able to update or delete individual entries to preserve data integrity.
      allow update, delete: if false;
    }
  }
}
