/**
 * @file Firestore Security Rules
 * @description This ruleset prioritizes ease of use for teachers by granting them full access to all collections. Other user roles (students, parents) are not considered in this prototyping phase.
 *
 * @dataStructure
 *   - /users/{userId}: Stores public user profiles, accessible to all.
 *   - /students/{studentId}: Stores student data.
 *   - /habit_entries/{entryId}: Stores habit entry data.
 *   - /app_settings/{settingId}: Stores global app settings.
 *   - /classes/{classId}: Stores class data.
 *
 * @keySecurityDecisions
 *   - Teachers (users with the "guru" role) have full read and write access to all collections. This simplifies initial development and testing.
 *   - The ruleset does NOT perform extensive data validation in this prototype phase, focusing instead on role-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profiles. Teachers can read and write all user profiles.
     * @path /users/{userId}
     * @allow (get, list, create, update, delete) User with role 'guru'.
     * @deny (create, update, delete) User without role 'guru'.
     * @principle Grants full access to teachers.
     */
    match /users/{userId} {
      allow get, list: if isSignedIn() && isGuru();
      allow create, update, delete: if isSignedIn() && isGuru();
    }

    /**
     * @description Manages access to student data. Teachers can read and write all student data.
     * @path /students/{studentId}
     * @allow (get, list, create, update, delete) User with role 'guru'.
     * @deny (create, update, delete) User without role 'guru'.
     * @principle Grants full access to teachers.
     */
    match /students/{studentId} {
      allow get, list: if isSignedIn() && isGuru();
      allow create, update, delete: if isSignedIn() && isGuru();
    }

    /**
     * @description Manages access to habit entry data. Teachers can read and write all habit entries.
     * @path /habit_entries/{entryId}
     * @allow (get, list, create, update, delete) User with role 'guru'.
     * @deny (create, update, delete) User without role 'guru'.
     * @principle Grants full access to teachers.
     */
    match /habit_entries/{entryId} {
      allow get, list: if isSignedIn() && isGuru();
      allow create, update, delete: if isSignedIn() && isGuru();
    }

    /**
     * @description Manages access to app settings. Teachers can read and write all app settings.
     * @path /app_settings/{settingId}
     * @allow (get, list, create, update, delete) User with role 'guru'.
     * @deny (create, update, delete) User without role 'guru'.
     * @principle Grants full access to teachers.
     */
    match /app_settings/{settingId} {
      allow get, list: if isSignedIn() && isGuru();
      allow create, update, delete: if isSignedIn() && isGuru();
    }

    /**
     * @description Manages access to class data. Teachers can read and write all class data.
     * @path /classes/{classId}
     * @allow (get, list, create, update, delete) User with role 'guru'.
     * @deny (create, update, delete) User without role 'guru'.
     * @principle Grants full access to teachers.
     */
    match /classes/{classId} {
      allow get, list: if isSignedIn() && isGuru();
      allow create, update, delete: if isSignedIn() && isGuru();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isGuru() {
      return request.auth.token.role == 'guru';
    }
  }
}