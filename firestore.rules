/**
 * @file Firebase Security Rules for Firestore.
 *
 * @core_philosophy This ruleset enforces a strict owner-only access model for user profiles and students,
 *                  allowing only authenticated users to manage their own data. App settings are read-only.
 *                  Habit entries can be created by teachers for students.
 *
 * @data_structure The database is structured as follows:
 * - /users/{userId}: Stores user profile information, where userId is the Firebase Auth UID.
 * - /students/{studentId}: Stores student data.
 * - /habit_entries/{entryId}: Stores habit entry data.
 * - /app_settings/{settingId}: Stores application settings. Only readable.
 * - /classes/{classId}: Stores class data, like its locked status.
 *
 * @key_security_decisions
 * - User profiles can only be read and written by the user themselves.
 * - Students can only be created, read, updated, and deleted by the user themselves (linkedUserUid).
 * - Listing of users and students is disallowed to prevent data enumeration.
 * - App settings are read-only and restricted to authenticated users.
 * - Habit Entries can be created, read, updated, and deleted by teachers.
 *
 * @denormalization_for_authorization
 * - For students, the 'linkedUserUid' field is used to associate a student's data with a specific user, enabling owner-based access control.
 * - For Habit Entries, the 'recordedBy' field is used to record the UID of the user who created the entry.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read and write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - User with UID 'user123' can read, create, update, or delete the profile at /users/user123 if authenticated.
     * @deny (get, create, update, delete) - User with UID 'user456' cannot access /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Secure student data. Only the linked user can manage the student's data.
     * @path /students/{studentId}
     * @allow (create, update, delete) - User with UID 'user123' can manage the student data at /students/student1 if the student's linkedUserUid is 'user123'.
     * @deny (create, update, delete) - User with UID 'user456' cannot access /students/student1 if the student's linkedUserUid is not 'user456'.
     * @principle Enforces document ownership based on the linkedUserUid field.
     */
    match /students/{studentId} {
      allow get: if isSignedIn() && isStudentLinked(studentId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.linkedUserUid == request.auth.uid;
      allow update: if isSignedIn() && isExistingStudentLinked(studentId);
      allow delete: if isSignedIn() && isExistingStudentLinked(studentId);
    }

    /**
     * @description Secure habit entries. Teachers can create, read, update, and delete habit entries.
     * @path /habit_entries/{entryId}
     * @allow (create, update, delete) - User with role 'guru' can manage the habit entry at /habit_entries/entry1.
     * @deny (create, update, delete) - User with role 'siswa' cannot access /habit_entries/entry1.
     * @principle Restricts write access to teachers.
     */
    match /habit_entries/{entryId} {
      allow get: if isSignedIn() && isTeacher();
      allow list: if isSignedIn() && isTeacher();
      allow create: if isSignedIn() && isTeacher();
      allow update: if isSignedIn() && isTeacher() && resource != null;
      allow delete: if isSignedIn() && isTeacher() && resource != null;
    }

    /**
     * @description App settings are read-only for authenticated users.
     * @path /app_settings/{settingId}
     * @allow get - Any authenticated user can read app settings.
     * @deny create, update, delete - No one can create, update, or delete app settings.
     * @principle Restricts all write operations to maintain configuration integrity.
     */
    match /app_settings/{settingId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure class data.
     * @path /classes/{classId}
     * @allow get - Any authenticated user can read class data.
     * @deny create, update, delete - No one can create, update, or delete class data.
     */
    match /classes/{classId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isTeacher();
        allow update: if isTeacher() && resource != null;
        allow delete: if isTeacher() && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isStudentLinked(studentId) {
        return get(/databases/$(database)/documents/students/$(studentId)).data.linkedUserUid == request.auth.uid;
    }

    function isExistingStudentLinked(studentId) {
        return resource != null && get(/databases/$(database)/documents/students/$(studentId)).data.linkedUserUid == request.auth.uid;
    }

    function isTeacher() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'guru';
    }
  }
}