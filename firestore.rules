/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a flexible security model that allows for rapid iteration while maintaining a baseline of safety.
 * It enforces a user-ownership model for user profiles and students, and allows public read access where appropriate, while
 * relaxing validation to enable faster prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information.
 * - /students/{studentId}: Stores detailed student data.
 * - /habit_entries/{entryId}: Stores individual habit scores for each student on a given day.
 * - /app_settings/{settingId}: Stores global app settings (e.g., teacher registration codes).
 * - /classes/{classId}: Stores data about classes.
 *
 * Key Security Decisions:
 * - User profiles are readable by anyone. Only the owner can modify their profile.
 * - Students are readable by anyone.
 * - App settings are readable and writable by anyone.
 * - No listing of users or students is allowed to prevent data scraping.
 * - Data validation is relaxed for rapid prototyping.
 *
 * Denormalization for Authorization:
 *  - Ownership of student data is determined by the `linkedUserUid` field in the `/students/{studentId}` document.  This allows
 *  the rule to quickly verify that the user accessing the student data is the linked user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (get) Any user can read a profile.
     * @allow (create, update, delete) Only the user with the matching userId can modify their profile.
     * @deny (list) User listing is not allowed.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages student data.
     * @path /students/{studentId}
     * @allow (get) Any user can read student data.
     * @allow (create) Any authenticated user can create student data.
     * @allow (update, delete) Only the linked user can modify student data.
     * @deny (list) Student listing is not allowed.
     * @principle Enforces document ownership for writes based on the 'linkedUserUid' field.
     */
    match /students/{studentId} {
        function isSignedIn() {
          return request.auth != null;
        }

        // Owner is determined by the linkedUserUid field
        function isOwner(linkedUserUid) {
            return request.auth.uid == linkedUserUid;
        }

        function isExistingOwner(linkedUserUid) {
          return isOwner(linkedUserUid) && exists(resource);
        }

        allow get: if true;
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && isOwner(resource.data.linkedUserUid);
        allow delete: if isSignedIn() && resource.data.linkedUserUid == resource.data.linkedUserUid && isOwner(resource.data.linkedUserUid);
    }

    /**
     * @description Manages habit entry data.
     * @path /habit_entries/{entryId}
     * @allow (get, list, create, update, delete) Any authenticated user can perform any operation.
     * @principle Allows open access for prototyping.
     */
    match /habit_entries/{entryId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages app settings data.
     * @path /app_settings/{settingId}
     * @allow (get, list, create, update, delete) Any authenticated user can perform any operation.
     */
    match /app_settings/{settingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages class data.
     * @path /classes/{classId}
     * @allow (get, list, create, update, delete) Any authenticated user can perform any operation.
     */
    match /classes/{classId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list, create, update, delete: if isSignedIn();
    }
  }
}