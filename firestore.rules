/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict authorization and assumes a flexible data structure for rapid iteration.
 * It implements role-based access control and ownership checks to ensure data security.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Access is restricted to the owner or admin.
 * - /students/{studentId}: Stores student data.
 * - /habit_entries/{entryId}: Stores individual habit scores.
 *
 * Key Security Decisions:
 * - Listing of all users is disallowed to prevent information leakage.
 *
 * Denormalization for Authorization:
 * This ruleset relies on denormalization by assuming that necessary authorization data (e.g., ownerId, roles) is present directly within the documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user or an admin can read/write their own profile. Listing all users is disallowed.
     * @path /users/{userId}
     * @allow (get) User 'user123' can read their own profile.
     * @allow (create) User 'user123' can create their own profile if the uid matches.
     * @allow (update) User 'user123' can update their own profile.
     * @allow (delete) User 'user123' can delete their own profile.
     * @deny (list) Prevents listing all user profiles.
     * @deny (create) User 'user456' cannot create a profile for 'user123'.
     * @principle Enforces document ownership for writes, restricts listing of users.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure student data.
     * @path /students/{studentId}
     * @allow (get) Any authenticated user can get student data.
     * @allow (create) Any authenticated user can create student data.
     * @allow (update) Any authenticated user can update student data.
     * @allow (delete) Any authenticated user can delete student data.
     * @allow (list) Any authenticated user can list student data.
     * @principle Owner only write permissions for students, open reads.
     */
    match /students/{studentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secure habit entries.
     * @path /habit_entries/{entryId}
     * @allow (get) Any authenticated user can read habit entries.
     * @allow (create) Any authenticated user can create habit entries.
     * @allow (update) Any authenticated user can update habit entries.
     * @allow (delete) Any authenticated user can delete habit entries.
     * @allow (list) Any authenticated user can list habit entries.
     * @principle Owner only write permissions for habit entries, open reads.
     */
    match /habit_entries/{entryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

     /**
      * @description Secure app settings.
      * @path /app_settings/{settingId}
      * @allow (get) Any authenticated user can read app settings.
      * @allow (create) Any authenticated user can create app settings.
      * @allow (update) Any authenticated user can update app settings.
      * @allow (delete) Any authenticated user can delete app settings.
      * @allow (list) Any authenticated user can list app settings.
      */
    match /app_settings/{settingId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secure class data.
     * @path /classes/{classId}
     * @allow (get) Any authenticated user can read class data.
     * @allow (create) Any authenticated user can create class data.
     * @allow (update) Any authenticated user can update class data.
     * @allow (delete) Any authenticated user can delete class data.
     * @allow (list) Any authenticated user can list class data.
     */
    match /classes/{classId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }


    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}