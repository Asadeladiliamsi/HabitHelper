/**
 * @fileoverview Firestore Security Rules for the aplikasi-akhlak-mulia application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model.  The "users" collection is publicly readable,
 * but all other collections require authentication and role-based authorization.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Publicly readable, but only the owner can modify.
 * - /students/{studentId}: Stores student data. Accessible to 'guru' and 'admin' roles.
 * - /habit_entries/{entryId}: Stores habit entry data. Accessible to 'guru' and 'admin' roles.
 * - /app_settings/{settingId}: Stores global application settings. Accessible to 'admin' only.
 * - /classes/{classId}: Stores class data. Accessible to 'admin' role.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied due to privacy concerns.
 * - Only authenticated users can access non-public collections.
 * - The 'admin' role has full access to all data.
 * - Data validation is minimal during the prototyping phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects listing all users.
     * @path /users
     * @allow (get) Signed-in user can get their own user document.
     * @deny (list) Prevents listing all users.
     * @principle Prevents listing all users.
     */
    match /users {
        allow list: if false;
    }

    /**
     * @description Manages user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile if the userId matches their auth.uid.
     * @allow (get) Signed-in user can get their own user document.
     * @allow (update) Signed-in user can update their own user document.
     * @allow (delete) Signed-in user can delete their own user document.
     * @deny (create) Prevents creating a user with a mismatched userId.
     * @deny (update) Prevents updating a user document with a mismatched userId.
     * @deny (delete) Prevents deleting another user's document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Manages student data.
     * @path /students/{studentId}
     * @allow (create) Admins and Gurus can create student profiles.
     * @allow (get) Admins and Gurus can read student profiles.
     * @allow (update) Admins and Gurus can update student profiles.
     * @allow (delete) Admins and Gurus can delete student profiles.
     * @deny (create) Non-admins and non-gurus cannot create student profiles.
     * @deny (update) Non-admins and non-gurus cannot update student profiles.
     * @deny (delete) Non-admins and non-gurus cannot delete student profiles.
     * @principle Enforces role-based access control.
     */
    match /students/{studentId} {
      function isAdmin() {
        return request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      }

      function isGuru() {
        return request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'guru');
      }

      function isSignedIn() {
        return request.auth != null;
      }
        
      allow get: if isSignedIn() && (isAdmin() || isGuru());
      allow list: if isSignedIn() && (isAdmin() || isGuru());
      allow create: if isSignedIn() && (isAdmin() || isGuru());
      allow update: if isSignedIn() && (isAdmin() || isGuru());
      allow delete: if isSignedIn() && (isAdmin() || isGuru());
    }

    /**
     * @description Manages habit entries.
     * @path /habit_entries/{entryId}
     * @allow (create) Admins and Gurus can create habit entries.
     * @allow (get) Admins and Gurus can read habit entries.
     * @allow (update) Admins and Gurus can update habit entries.
     * @allow (delete) Admins and Gurus can delete habit entries.
     * @deny (create) Non-admins and non-gurus cannot create habit entries.
     * @deny (update) Non-admins and non-gurus cannot update habit entries.
     * @deny (delete) Non-admins and non-gurus cannot delete habit entries.
     * @principle Enforces role-based access control.
     */
    match /habit_entries/{entryId} {
      function isAdmin() {
        return request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      }

      function isGuru() {
        return request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'guru');
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && (isAdmin() || isGuru());
      allow list: if isSignedIn() && (isAdmin() || isGuru());
      allow create: if isSignedIn() && (isAdmin() || isGuru());
      allow update: if isSignedIn() && (isAdmin() || isGuru());
      allow delete: if isSignedIn() && (isAdmin() || isGuru());
    }

    /**
     * @description Manages application settings.
     * @path /app_settings/{settingId}
     * @allow (create) Admins can create application settings.
     * @allow (get) Admins can read application settings.
     * @allow (update) Admins can update application settings.
     * @allow (delete) Admins can delete application settings.
     * @deny (create) Non-admins cannot create application settings.
     * @deny (update) Non-admins cannot update application settings.
     * @deny (delete) Non-admins cannot delete application settings.
     * @principle Enforces role-based access control.
     */
    match /app_settings/{settingId} {
      function isAdmin() {
        return request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages class data.
     * @path /classes/{classId}
     * @allow (create) Admins can create class data.
     * @allow (get) Admins can read class data.
     * @allow (update) Admins can update class data.
     * @allow (delete) Admins can delete class data.
     * @deny (create) Non-admins cannot create class data.
     * @deny (update) Non-admins cannot update class data.
     * @deny (delete) Non-admins cannot delete class data.
     * @principle Enforces role-based access control.
     */
    match /classes/{classId} {
      function isAdmin() {
        return request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}